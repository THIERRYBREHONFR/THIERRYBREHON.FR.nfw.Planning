// affiche une boite de confirmation
function Confirm(label) {
    var confirm_value = document.createElement("INPUT");
    confirm_value.type = "hidden";
    confirm_value.name = "confirm_value";
    if (confirm(label)) {
        confirm_value.value = "oui";
    } else {
        confirm_value.value = "non";
    }
    document.forms[0].appendChild(confirm_value);
}

//remplace le point par une virgule
function replacePoint() {
    if (window.event) {
        var e = window.event;
        var delimNbFlottant = ',';
        //'.' a ete tapé, on le remplace par une ','
        if (string.fromCharCode(e.keyCode) == ".")
            e.keyCode = delimNbFlottant.charCodeAt(0);
    }
}

//remet la valeur par défaut
function valeurParDefaut(valeur, zone, e) {
    if (window.event) {
        var e = window.event;
        if (e.keyCode == 8 && e.shiftKey)
        {
            e.keyCode = 0;
            zone.value = valeur;
        }
    }
    else {      // sous FireFox, il n'y a pas de windows.event !!!
        if (e) {
            if (e.keyCode == 8 && e.shiftKey)
            {
                e.preventDefault();
                zone.value = valeur;
            }
        }
    }
}

// remplace la touche return par tab et invalide le retour arrière
function navigate(e) {
    if (window.event) { // pour gayane vieille version de internet
        var e = window.event;
        if (e.keyCode == 13 && !e.shiftKey) e.keyCode =  9;
        else if (e.keyCode == 8) e.keyCode = 0;
    }
    var doPrevent;
    if (e && e.keyCode == 8) {
        var d = e.srcElement || e.target;
        if ((d.tagName.toUpperCase() == 'INPUT' && (d.type.toUpperCase() == 'TEXT' || d.type.toUpperCase() == 'PASSWORD'))
         || d.tagName.toUpperCase() == 'TEXTAREA') {
            doPrevent = d.readOnly || d.disabled;
        }
        else doPrevent = true;
    }

    if (doPrevent) e.preventDefault();
}

function MajIdFromCbo(Combo,HField){
index=document.getElementById(Combo).selectedIndex;
if (index<0)
document.getElementById(HField).value=0;
else
document.getElementById(HField).value=document.getElementById(Combo).options[index].value;
}

//!/!/!/!/!/!/ GESTION DES LISTES /!/!/!/!/!/!/

function CopierCollerEntreListBox(listBoxOrigine, listBoxDestination) {
    //copie dans une listbox destination les items sélectionnés dans une listbox origine, sans les y supprimer
    for (var iOption = 0; iOption < listBoxOrigine.options.length; ++iOption)
        if (listBoxOrigine.options[iOption].selected)
        listBoxDestination.options[listBoxDestination.options.length] = new Option(listBoxOrigine.options[iOption].text, listBoxOrigine.options[iOption].value);
    listBoxOrigine.selectedIndex = -1;
}
function CouperCollerEntreListBox(listBoxOrigine, listBoxDestination) {
    //transfère dans une listbox destination les items sélectionnés d'une listbox origine
    for (var iOption = 0; iOption < listBoxOrigine.options.length; ++iOption)
        if (listBoxOrigine.options[iOption].selected) {
        listBoxDestination.options[listBoxDestination.options.length] = new Option(listBoxOrigine.options[iOption].text, listBoxOrigine.options[iOption].value);
        listBoxOrigine.options[iOption] = null;
    }
    listBoxOrigine.selectedIndex = -1;
}
function CopierCollerEntreTextEtListBox(textBoxOrigine, listBoxDestination) {
    //copie dans une listbox destination le texte saisi dans une textbox origine, sans l'y supprimer
    if (textBoxOrigine.value != "")
        listBoxDestination.options[listBoxDestination.options.length] = new Option(textBoxOrigine.value, "0");
}
function CouperCollerEntreTextEtListBox(textBoxOrigine, listBoxDestination) {
    //transfère dans une listbox destination le texte saisi dans une textbox origine
    if (textBoxOrigine.value != "")
        listBoxDestination.options[listBoxDestination.options.length] = new Option(textBoxOrigine.value, "0");
    textBoxOrigine.value = "";
}
function RetirerLesSelectionsEntreListBox(listBoxOrigine, listBoxDestination, comparerTextes) {
    // retire d'une listbox destination, les items sélectionnés dans une listbox origine, par comparaison de leurs id (par défaut), ou de leurs textes
    if (listBoxOrigine.selectedIndex != -1)
        for (var iOption = 0; iOption < listBoxOrigine.options.length; ++iOption)
        if (listBoxOrigine.options[iOption].selected)
        RetirerUneSelectionDeListBox(listBoxDestination, listBoxOrigine.options[iOption], comparerTextes);
}
function RetirerUneSelectionDeListBox(listBox, selection, comparerTextes) {
    //retire une sélection d'une listbox, par comparaison des textes (plusieurs retraits possible donc)
    for (var iOption = 0; iOption < listBox.options.length; ++iOption)
        if ((comparerTextes && listBox.options[iOption].text == selection.text)
      || (!comparerTextes && listBox.options[iOption].value == selection.value))
        listBox.options[iOption] = null;
}
function RetirerLesSelectionsDeListBox(listBox, sauf0) {
    //retire d'une liste box, les items sélectionnés dans cette listbox, sauf éventuellement le premier (retire tout par défaut)
    var iOption = 0;
    if (sauf0) iOption = 1;
    for (; iOption < listBox.options.length; )
        if (listBox.options[iOption].selected) listBox.options[iOption] = null;
    else iOption++;
}
function RetirerToutesLesSelectionsDeListBox(listBox, sauf0) {
    //retire d'une liste box, tous les items , sauf éventuellement le premier (retire tout par défaut)
    var iOption = 0;
    if (sauf0) iOption = 1;
    for (; iOption < listBox.options.length; )
        listBox.options[iOption] = null;
}
function PreparerListBox(listBox, retour, textes, separateur) {
    // désectionne les items et concatène leurs ids (ou leurs textes) dans un hidden field
    if (retour != null) retour.value = "";
    for (var iOption = 0; iOption < listBox.options.length; ++iOption) {
        listBox.options[iOption].selected = false;
        if (retour != null) {
            if (textes) retour.value += listBox.options[iOption].text;
            else retour.value += listBox.options[iOption].value;
            if (separateur != null) retour.value += separateur;
            else retour.value += ";";
        }
    }
}

