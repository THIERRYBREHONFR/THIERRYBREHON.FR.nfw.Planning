
function bhn_dropdown_counter(debut, fin, intervalle, duree, balise) {
    //debut= Nombre initial du compteur
    //fin= Nombre final du compteur
    //    duree =  Durée en seconde pendant laquel le compteur déroulera
    var node = document.getElementById(balise); // On récupère notre noeud où sera rafraîchi la valeur du compteur
    var cpt;// Initialisation du compteur
    var delta;
    cpt = debut;
    var inter;
    delta = 200;
    if (intervalle == 0)
        inter = Math.ceil((delta * (debut - fin)) / 1000 / duree);
    else if (debut < fin) inter = -1 * Math.abs(intervalle);
    else inter = Math.abs(intervalle);
    if (inter == 0) if (debut < fin) inter = -1; else inter = 1;
    delta = Math.ceil((duree * 1000 * inter) / (debut - fin));
    setTimeout(countdown, delta);
    function countdown() {
        cpt = cpt - inter;
        if (debut < fin) {
            if (cpt > fin) cpt = fin;
            node.innerHTML = cpt;
            if (cpt < fin) setTimeout(countdown, delta); // Si on est pas arrivé à la valeur finale, on relance notre compteur une nouvelle fois
        }
        else {
            if (cpt < fin) cpt = fin;
            node.innerHTML = cpt;
            if (cpt > fin) setTimeout(countdown, delta); // Si on est pas arrivé à la valeur finale, on relance notre compteur une nouvelle fois
        }
    }
}


function bhn_dropdown_counter(debut, intervalle, duree, balise) {
    //debut= Nombre initial du compteur
    //fin= Nombre final du compteur
    //    duree =  Durée en seconde pendant laquel le compteur déroulera
    var node = document.getElementById(balise); // On récupère notre noeud où sera rafraîchi la valeur du compteur
    var fin = node.innerHTML;
    node.style.visibility = "visible";
    node.innerHTML = 0;
    var cpt;// Initialisation du compteur
    var delta;
    cpt = debut;
    var inter;
    delta = 200;
    if (intervalle == 0)
        inter = Math.ceil((delta * (debut - fin)) / 1000 / duree);
    else if (debut < fin) inter = -1 * Math.abs(intervalle);
    else inter = Math.abs(intervalle);
    if (inter == 0) if (debut < fin) inter = -1; else inter = 1;
    delta = Math.ceil((duree * 1000 * inter) / (debut - fin));
    setTimeout(countdown, delta);
    function countdown() {
        cpt = cpt - inter;
        if (debut < fin) {
            if (cpt > fin) cpt = fin;
            node.innerHTML = cpt;
            if (cpt < fin) setTimeout(countdown, delta); // Si on est pas arrivé à la valeur finale, on relance notre compteur une nouvelle fois
        }
        else {
            if (cpt < fin) cpt = fin;
            node.innerHTML = cpt;
            if (cpt > fin) setTimeout(countdown, delta); // Si on est pas arrivé à la valeur finale, on relance notre compteur une nouvelle fois
        }
    }
}

/*!
* jquery.counterup.js 1.0
*
* Copyright 2013, Benjamin Intal http://gambit.ph @bfintal
* Released under the GPL v2 License
*
* Date: Nov 26, 2013
*/
(function ($) {
    "use strict";

    $.fn.counterUp = function (options) {

        // Defaults
        var settings = $.extend({
            'time': 400,
            'delay': 10
        }, options);

        return this.each(function () {

            // Store the object
            var $this = $(this);
            var $settings = settings;

            var counterUpper = function () {
                var nums = [];
                var divisions = $settings.time / $settings.delay;
                var num = $this.text();
                var isComma = /[0-9]+,[0-9]+/.test(num);
                num = num.replace(/,/g, '');
                var isInt = /^[0-9]+$/.test(num);
                var isFloat = /^[0-9]+\.[0-9]+$/.test(num);
                var decimalPlaces = isFloat ? (num.split('.')[1] || []).length : 0;

                // Generate list of incremental numbers to display
                for (var i = divisions; i >= 1; i--) {

                    // Preserve as int if input was int
                    var newNum = parseInt(num / divisions * i);

                    // Preserve float if input was float
                    if (isFloat) {
                        newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);
                    }

                    // Preserve commas if input had commas
                    if (isComma) {
                        while (/(\d+)(\d{3})/.test(newNum.ToString())) {
                            newNum = newNum.ToString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
                        }
                    }

                    nums.unshift(newNum);
                }

                $this.data('counterup-nums', nums);
                $this.text('0');

                // Updates the number until we're done
                var f = function () {
                    $this.text($this.data('counterup-nums').shift());
                    if ($this.data('counterup-nums').length) {
                        setTimeout($this.data('counterup-func'), $settings.delay);
                    } else {
                        delete $this.data('counterup-nums');
                        $this.data('counterup-nums', null);
                        $this.data('counterup-func', null);
                    }
                };
                $this.data('counterup-func', f);

                // Start the count up
                setTimeout($this.data('counterup-func'), $settings.delay);
            };

            // Perform counts when the element gets into view
            $this.waypoint(counterUpper, { offset: '100%', triggerOnce: true });
        });

    };

})(jQuery);